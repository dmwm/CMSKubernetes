# Reference:
# https://hackernoon.com/deployment-of-full-scale-elk-stack-to-kubernetes-6f38f6c57c55
# https://github.com/ITSvitCo/aws-k8s/tree/master/kubernetes-manifests/monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash
  namespace: monitoring
data:
  logstash.conf: |-
    input { beats { port => 5044 } }
    filter {
      mutate { replace => { "producer" => "cmswebk8s" } }
      ruby { code => "event.set('logtime',(event.get('@timestamp').to_f * 1000).to_i)" }
      mutate {
          add_field => {
              "hostname" => "%{[agent][hostname]}"
              "agent_id" => "%{[agent][id]}"
              "ephemeral_id" => "%{[agent][ephemeral_id]}"
              "cmsweb_log" => "%{[log][file][path]}"
        }
      }
      if "frontend" in [tags] {
          mutate { replace => { "type" => "frontend" } }
          grok {
            match => { "message" => '\[%{HTTPDATE:tstamp}\] %{DATA:frontend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} \[data:.*\] \[auth: %{DATA:tls} %{DATA:crypto} "%{DATA:dn}".*\] \[ref: "%{DATA}.*" "%{DATA:client}" \]' }
          }
          grok { match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' } }
          if [uri_params] {
              grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
              if [api] == "" {
                  grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
              }
          } else {
              grok { match => { "request" => '/.*/%{DATA:api}$' } }
              if [api] == "" {
                  grok { match => { "request" => '/.*/%{DATA:api}/$' } }
              }
          }
          if [uri_params] and ![api] {
              grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
          }
          if ![api] {
              mutate { replace => { "api" => "%{request}" } }
              mutate { replace => { "system" => "%{request}" } }
          }
          date {
             match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
             target => "date_object"
          }
          ruby {
             code => "event.set('rec_timestamp',event.get('date_object').to_i)
                      event.set('rec_date',event.get('date_object'))
                     "
          }
          mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      }

      if "acdcserver" in [tags] {
          mutate { replace => { "type" => "acdcserver" } }
      }
      if "confdb" in [tags] {
          mutate { replace => { "type" => "confdb" } }
      }
      if "couchdb" in [tags] {
          mutate { replace => { "type" => "couchdb" } }
          grok {
              match => { "message" => '\[%{GREEDYDATA:tstamp}\] \[%{WORD:log_level}\] \[<.*>\] %{IPORHOST:clientip} - - %{WORD:method} %{NOTSPACE:request} %{NUMBER:code:int}' }
          }
          grok { match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' } }
          grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
          date {
             match => [ "tstamp", "EEE, dd MMM yyyy HH:mm:ss z" ]
             target => "date_object"
          }
          ruby {
             code => "event.set('rec_timestamp',event.get('date_object').to_i)
                      event.set('rec_date',event.get('date_object'))
                     "
          }
          mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      }
      if "crabserver" in [tags] {
          mutate { replace => { "type" => "crabserver" } }
      }
      if "dbs" in [tags] {
          mutate { replace => { "type" => "dbs" } }
          grok {
              match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
          }
          grok { match => { "request" => '/dbs/%{WORD:instance}/%{WORD:instance_type}/%{WORD:instance_kind}/%{WORD:api}?%{DATA:params}' } }
          date {
             match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
             target => "date_object"
          }
          ruby {
             code => "event.set('rec_timestamp',event.get('date_object').to_i)
                      event.set('rec_date',event.get('date_object'))
                     "
          }
          mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      }
      if "das" in [tags] {
          mutate { replace => { "type" => "das" } }
      }
      if "dqmgui" in [tags] {
          mutate { replace => { "type" => "dqmgui" } }
      }
      if "phedex" in [tags] {
          mutate { replace => { "type" => "phedex" } }
      }
      if "reqmgr2" in [tags] {
          mutate { replace => { "type" => "reqmgr2" } }
          grok {
              match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
          }
          date {
             match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
             target => "date_object"
          }
          mutate { gsub =>  [ "dn","/CN=\d+","" ] }
          mutate { replace => { "type" => "reqmgr2" } }
          ruby {
             code => "event.set('rec_timestamp',event.get('date_object').to_i)
                      event.set('rec_date',event.get('date_object'))
                     "
          }
      }
      if "reqmgr2ms" in [tags] {
          mutate { replace => { "type" => "reqmgr2ms" } }
      }
      if "reqmgr2-tasks" in [tags] {
          mutate { replace => { "type" => "reqmgr2-tasks" } }
      }
      if "reqmon" in [tags] {
          mutate { replace => { "type" => "reqmon" } }
      }
      if "t0_reqmon" in [tags] {
          mutate { replace => { "type" => "t0_reqmon" } }
      }
      if "t0wmadatasvc" in [tags] {
          mutate { replace => { "type" => "t0wmadatasvc" } }
      }
      if "workqueue" in [tags] {
          mutate { replace => { "type" => "workqueue" } }
      }
      if "workqueue-tasks" in [tags] {
          mutate { replace => { "type" => "workqueue-tasks" } }
      }

      # common filters

      # drop failed records
      if "_grokparsefailure" in [tags] { drop { } }
      # remove quotes from message entry since it will break the JSON
      mutate { gsub => [ "message", "\n", "", "message", "\"", ""] }
      # last part we should remove object fields
      mutate { remove_field => ["agent", "log", "input", "tags", "ecs", "host"] }

    }

    # send results (JSON records) to local file
    # Each records must have the following attributes:
    # "producer":"%{producer}", "type": "%{type}"
    # then we parse all filebeat attributes
    # "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id":
    # "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}",
    # followed by log message itself
    # "message": "%{message}"
    output {
      if [type] == "frontend" {
          http {
              http_method => post
              url => "http://monit-logs.cern.ch:10012/"
              content_type => "application/json; charset=UTF-8"
              format => "message"
              # for message please use double quotes for string type and no-double
              # quotes for objects, e.g. %{agent} is an object, while "%{dn}" is a string
              message => '[{"producer": "cmswebk8s", "type": "frontend", "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id": "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}", "message": "%{message}", "api": "%{api}", "client": "%{client}", "clientip": "%{clientip}", "code": %{code}, "crypto": "%{crypto}", "date_object": "%{date_object}", "dn": "%{dn}", "frontend": "%{frontend}", "httpversion": "%{httpversion}", "method": "%{method}", "rec_date": "%{rec_date}", "rec_timestamp": %{rec_timestamp}, "request": "%{request}", "system": "%{system}", "tls": "%{tls}", "tstamp": "%{tstamp}", "uri_params": "%{uri_params}", "uri_path": "%{uri_path}"}]'
          }
      }
      if [type] == "couchdb" {
          http {
              http_method => post
              url => "http://monit-logs.cern.ch:10012/"
              #url => "http://monit-logsource-00acb7ff81.cern.ch:10012/"
              content_type => "application/json; charset=UTF-8"
              format => "message"
              message => '[{"producer": "cmswebk8s", "type": "couchdb", "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id": "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}", "message": "%{message}", "clientip":"%{clientip}", "method":"%{method}", "request":"%{request}", "rec_timestamp":"%{rec_timestamp}", "rec_date":"%{rec_date}", "log_level":"%{log_level}", "code":%{code}, "system":"%{system}", "uri_path":"%{uri_path}", "uri_params":"%{uri_params}", "uri_path":"%{uri_path}", "api":"%{api}"}]'
          }
      }
      if [type] == "dbs" {
          http {
              http_method => post
              url => "http://monit-logs.cern.ch:10012/"
              #url => "http://monit-logsource-00acb7ff81.cern.ch:10012/"
              content_type => "application/json; charset=UTF-8"
              format => "message"
              message => '[{"producer": "cmswebk8s", "type": "dbs", "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id": "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}", "message": "%{message}", "tstamp": "%{tstamp}", "backend": "%{backend}", "clientip": "%{clientip}", "method":"%{method}", "httpversion":"%{httpversion}", "code":%{code}, "status":"%{status}", "auth":"%{auth}", "dn":"%{dn}", "client_agent":"%{client_agent}", "instance":"%{instance}", "instance_type":"%{instance_type}", "instance_kind":"%{instance_kind}", "api":"%{api}", "params":"%{params}", "request":"%{request}", "rec_timestamp":"%{rec_timestamp}", "rec_date":"%{rec_date}"}]'
          }
      }
      if [type] == "reqmgr2" {
          http {
              http_method => post
              url => "http://monit-logs.cern.ch:10012/"
              #url => "http://monit-logsource-00acb7ff81.cern.ch:10012/"
              content_type => "application/json; charset=UTF-8"
              format => "message"
              message => '[{"producer": "cmswebk8s", "type": "reqmgr2", "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id": "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}", "message": "%{message}", "tstamp": "%{tstamp}", "backend": "%{backend}", "clientip": "%{clientip}", "method":"%{method}", "httpversion":"%{httpversion}", "code":%{code}, "status":"%{status}", "auth":"%{auth}", "dn":"%{dn}", "client_agent":"%{client_agent}", "request":"%{request}", "rec_timestamp":"%{rec_timestamp}", "rec_date":"%{rec_date}"}]'
          }
      }

      # example how to feed data to a local file
      #file {
      #    path => "/tmp/logstash-output.log"
      #}
      
      # example how to enable debugging
      #stdout { codec => rubydebug }
    }

  logstash.yml: |-
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    # disable connection to ES
    xpack.monitoring.enabled: false
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: logstash
  namespace: monitoring
spec:
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - image: docker.elastic.co/logstash/logstash:7.4.1
        name: logstash
        ports:
        - name: logstash
          containerPort: 5044
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
          readOnly: true
        - name: pipeline
          mountPath: /usr/share/logstash/pipeline
          readOnly: true
        args:
        - -f
        - /usr/share/logstash/pipeline/logstash.conf
        resources:
          limits:
            memory: 4Gi
            cpu: "400m"
          requests:
            memory: 4Gi
            cpu: "400m"
      volumes:
      - name: pipeline
        configMap:
          name: logstash
          items:
          - key: logstash.conf
            path: logstash.conf
      - name: config
        configMap:
          name: logstash
          items:
          - key: logstash.yml
            path: logstash.yml
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: monitoring
  labels:
    app: logstash
spec:
  selector:
    app: logstash
  ports:
  - name: logstash
    port: 5044
    targetPort: 5044
    protocol: TCP
