input { beats { port => 5044 } }
filter {
  mutate { replace => { "producer" => "cmswebk8s" } }
  ruby { code => "event.set('logtime',(event.get('@timestamp').to_f * 1000).to_i)" }
  mutate {
      add_field => {
          "hostname" => "%{[host][name]}"
          "filebeat_name" => "%{[agent][name]}"
          "filebeat_version" => "%{[agent][version]}"
          "filebeat_id" => "%{[agent][id]}"
          "ephemeral_id" => "%{[agent][ephemeral_id]}"
          "cmsweb_log" => "%{[log][file][path]}"
          "cmsweb_cluster" => "${CMSWEB_CLUSTER:NA}"
          "cmsweb_env" => "${CMSWEB_ENV:NA}"
    }
  }
  if "frontend" in [tags] {
      mutate { replace => { "type" => "frontend" } }
      grok {
        match => { "message" => '\[%{HTTPDATE:tstamp}\] %{DATA:frontend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} \[data: %{NUMBER:bytes_sent:int} in %{NUMBER:bytes_received:int} out %{NUMBER:body_size:int} body %{NUMBER:time_spent_ms:int} us \] \[auth: %{DATA:tls} %{DATA:crypto} "%{DATA:dn}".*\] \[ref: "%{DATA}.*" "%{DATA:client}" \](?: %{NUMBER:fe_port}|)' }
      }
      grok {
        pattern_definitions => { "WORDHYPHEN" => "\b[\w\-]+\b" }
        match => { "request" => '/%{WORDHYPHEN:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
      }
      if [system] =~ /^(wmstatsserver|reqmgr2|t0_reqmon|ms-pileup|ms-transferor|ms-monitor|ms-output|ms-unmerged|ms-rulecleaner)$/ {
          grok {
              match => { "uri_path" => '/[^/]+/%{WORD:api}' }
          }
          if [api] == "" {
              grok {
                  match => { "uri_path" => '/[^/]+/%{DATA:api}/' }
              }
          }
      }else {
          if [uri_params] {
              grok {
                  match => { "uri_path" => '/.*/%{DATA:api}$' }
              }
              if [api] == "" {
                  grok {
                      match => { "uri_path" => '/.*/%{DATA:api}/$' }
                  }
              }
          } else {
              grok {
                  match => { "request" => '/.*/%{DATA:api}$' }
              }
              if [api] == "" {
                  grok {
                      match => { "request" => '/.*/%{DATA:api}/$' }
                  }
              }
          }
      }
      if [uri_params] and ![api] {
          grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
      }
      if ![api] {
          mutate { replace => { "api" => "%{request}" } }
      }
      if [client] {
          grok { match => { "client" => '%{DATA:client_name}/%{DATA:client_version}$' } }
      }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                  event.set('timestamp',(event.get('rec_timestamp').to_f * 1000).to_i)
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }

  if "aps" in [tags] {
      mutate { replace => { "type" => "aps" } }
      grok {
        match => { "message" => '\[%{TIMESTAMP_ISO8601:tstamp}\] %{DATA:httpversion} %{NUMBER:code:int} %{WORD:method} %{NOTSPACE:request} \[data: %{NUMBER:bytes_received:int} in %{NUMBER:bytes_sent:int} out\] \[host: %{IPORHOST:frontend}(?::%{NUMBER:fe_port})?\] \[remoteAddr: %{IPORHOST:clientip}:%{NUMBER:clientport:int}\] \[X-Forwarded-For: (%{IPORHOST:x_forwarded_ip}:%{NUMBER:x_forwarded_port:int})?\] \[X-Forwarded-Host: (%{HOSTNAME:x_forwarded_host})?\] \[auth: %{DATA:tls} %{DATA:crypto} "%{DATA:dn}" %{DATA:auth_name} %{WORD:auth_protocol}\] \[ref: "%{DATA:cluster}" "%{DATA:client}"\] \[req: %{NUMBER:request_time:float} \(s\) proxy-resp: %{NUMBER:proxy_resp_time:float} \(s\)\]' }
      }
      grok {
        match => {
          "cmsweb_log" => "/data/srv/logs/frontend/%{DATA:log_prefix}_%{GREEDYDATA:proxy_server}-%{DATA}_%{YEAR}%{MONTHNUM}%{MONTHDAY}"
        }
      }
      grok {
        pattern_definitions => { "WORDHYPHEN" => "\b[\w\-]+\b" }
        match => { "request" => '/%{WORDHYPHEN:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
      }
      if [system] =~ /^(wmstatsserver|reqmgr2|t0_reqmon|ms-pileup|ms-transferor|ms-monitor|ms-output|ms-unmerged|ms-rulecleaner)$/ {
          grok {
              match => { "uri_path" => '/[^/]+/%{WORD:api}' }
          }
          if [api] == "" {
              grok {
                  match => { "uri_path" => '/[^/]+/%{DATA:api}/' }
              }
          }
      }else {
          if [uri_params] {
              grok {
                  match => { "uri_path" => '/.*/%{DATA:api}$' }
              }
              if [api] == "" {
                  grok {
                      match => { "uri_path" => '/.*/%{DATA:api}/$' }
                  }
              }
          } else {
              grok {
                  match => { "request" => '/.*/%{DATA:api}$' }
              }
              if [api] == "" {
                  grok {
                      match => { "request" => '/.*/%{DATA:api}/$' }
                  }
              }
          }
      }
      if [uri_params] and ![api] {
          grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
      }
      if ![api] {
          mutate { replace => { "api" => "%{request}" } }
      }
      if [client] {
          grok { match => { "client" => '%{DATA:client_name}/%{DATA:client_version}$' } }
      }

      date {
        match => [ "tstamp", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSZZ" ]
        target => "date_object"
      }

      ruby {
        code => "
          event.set('rec_timestamp', event.get('date_object').to_i);
          event.set('rec_date', event.get('date_object'));
          event.set('timestamp', (event.get('rec_timestamp').to_f * 1000).to_i);
        "
      }

      mutate { gsub => [ "dn", "/CN=\\d+", "" ] }
  }

  if "acdcserver" in [tags] {
      mutate { replace => { "type" => "acdcserver" } }
  }
  if "confdb" in [tags] {
      mutate { replace => { "type" => "confdb" } }
  }
  if "couchdb" in [tags] {
      mutate { replace => { "type" => "couchdb" } }
      grok {
          match => { "message" => '\[%{GREEDYDATA:tstamp}\] \[%{WORD:log_level}\] \[<.*>\] %{IPORHOST:clientip} - - %{WORD:method} %{NOTSPACE:request} %{NUMBER:code:int}' }
      }
      grok { match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' } }
      grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
      date {
         match => [ "tstamp", "EEE, dd MMM yyyy HH:mm:ss z" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }
  if "crabcache" in [tags] {
      mutate { replace => { "type" => "crabcache" } }
  }
  if "dbs" in [tags] {
      mutate { replace => { "type" => "dbs" } }
      grok {
          match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
      }
      grok { match => { "request" => '/dbs/%{WORD:instance}/%{WORD:instance_type}/%{WORD:instance_kind}/%{WORD:api}?%{DATA:params}' } }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }
  if "das" in [tags] {
      mutate { replace => { "type" => "das" } }
  }
  if "dqmgui" in [tags] {
      mutate { replace => { "type" => "dqmgui" } }
  }
  if "phedex" in [tags] {
      mutate { replace => { "type" => "phedex" } }
  }
  if "reqmgr2" in [tags] {
      mutate { replace => { "type" => "reqmgr2" } }
      grok {
          match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
      }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
         target => "date_object"
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      mutate { replace => { "type" => "reqmgr2" } }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                 "
      }
  }
  if "reqmgr2ms" in [tags] {
      mutate { replace => { "type" => "reqmgr2ms" } }
  }
  if "reqmgr2-tasks" in [tags] {
      mutate { replace => { "type" => "reqmgr2-tasks" } }
  }
  if "reqmon" in [tags] {
      mutate { replace => { "type" => "reqmon" } }
  }
  if "t0_reqmon" in [tags] {
      mutate { replace => { "type" => "t0_reqmon" } }
  }
  if "t0wmadatasvc" in [tags] {
      mutate { replace => { "type" => "t0wmadatasvc" } }
  }
  if "workqueue" in [tags] {
      mutate { replace => { "type" => "workqueue" } }
  }
  if "workqueue-tasks" in [tags] {
      mutate { replace => { "type" => "workqueue-tasks" } }
  }

  # common filters

  # drop failed records
  # if "_grokparsefailure" in [tags] { drop { } }
  # remove quotes from message entry since it will break the JSON
  mutate { gsub => [ "message", "\n", "", "message", "\"", ""] }

  # We need to remove these nested fields that added by Logstash&Filebeat itself
  # event: filebeat v7+
  mutate { remove_field => ["agent", "log", "input", "tags", "ecs", "host", "event"] }

}

# send results (JSON records) to local file
# Each records must have the following attributes:
# "producer":"%{producer}", "type": "%{type}"
# then we parse all filebeat attributes
# "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id":
# "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}",
# followed by log message itself
# "message": "%{message}"
output {
  if [type] == "frontend" {
      http {
          http_method => post
          url => "http://monit-logs.cern.ch:10012/"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          # for message please use double quotes for string type and no-double
          # quotes for objects, e.g. %{agent} is an object, while "%{dn}" is a string
          socket_timeout => 60
          connect_timeout => 60
      }
  }
  if [type] == "aps" {
      http {
          http_method => post
          url => "http://monit-logs.cern.ch:10012/"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          socket_timeout => 60
          connect_timeout => 60
      }
  }
  if [type] == "couchdb" {
      http {
          http_method => post
          url => "http://monit-logs.cern.ch:10012/"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          socket_timeout => 60
          connect_timeout => 60
      }
  }
  if [type] == "dbs" {
      http {
          http_method => post
          url => "http://monit-logs.cern.ch:10012/"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          socket_timeout => 60
          connect_timeout => 60
      }
  }
  if [type] == "reqmgr2" {
      http {
          http_method => post
          url => "http://monit-logs.cern.ch:10012/"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          socket_timeout => 60
          connect_timeout => 60
      }
  }

  # example how to feed data to a local file
  #file {
  #    path => "/tmp/logstash-output.log"
  #}

  # example how to enable debugging
  #stdout { codec => rubydebug }
}
