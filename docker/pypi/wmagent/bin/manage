#!/bin/bash

### The main manage script for WMAgent
WMCoreVersion=$(python -c "from WMCore import __version__ as WMCoreVersion; print(WMCoreVersion)")

# Load common definitions and environment:
source $WMA_DEPLOY_DIR/bin/manage-common.sh
source $WMA_ENV_FILE

#
# Global variables etc
#

# NOTE: The folowing environment variables, which are referenced from inside the WMCore code,
#       are exported by sourcing the $WMA_ENV_FILE at runtime, but not from the Dockerfile at build time
#
#       * $WMAGENTPY3_VERSION
#       * $WMAGENTPY3_ROOT
#       * $WMCORE_ROOT
#       * install
#       * config
#       * X509_*

# NOTE: The following set of global(but not environment) variables are configurred
#       by sourcing $WMA_DEPLOY_DIR/bin/manage-common.sh
#       * wmaInitAdmin
#       * wmaInitRucio
#       * wmaInitActive
#       * wmaInitAgent
#       * wmaInitSqlDB
#       * wmaInitCouchDB
#       * wmaInitConfig
#       * wmaInitResourceControl
#       * wmaInitUpload
#       * wmaInitUsing
#       * wmaSchemaFile
#       * wmaDBName=wmagent

# NOTE: The following set of functions is defined and imported by
#       by sourcing $WMA_DEPLOY_DIR/bin/manage-common.sh
#       * _exec_mysql
#       * _exec_oracle
#       * _init_valid
#       * _sql_dumpSchema
#       * _sql_schema_valid
#       * _sql_dbid_valid
#       * _sql_db_isclean
#       * _sql_write_agentid
#       * _status_of_couch
#       * _status_of_mysql
#       * _status_of_oracle
#       * _renew_proxy
#       * _parse_wmasecrets
#       * _load_wmasecrets
#       * _print_settings

# NOTE: All credential variables are loaded by parsing the WMAgent.secrets file
#       with _loadwmasecrets

RUCIO_CONFIG="$WMA_CONFIG_DIR/etc/rucio.cfg"

GLOBAL_WORKQUEUE_URL=
LOCAL_WORKQUEUE_DBNAME=workqueue

WORKLOAD_SUMMARY_URL=
WORKLOAD_SUMMARY_DBNAME=workloadsummary

# Loading the WMAgent.Secrets file
_load_wmasecrets || { err=$?; echo "$(basename $0): ERROR: Could not load WMAgent.secrets file: $WMA_SECRETS_FILE"; exit 1 ;}


# callbacks to activate or show initialization has been done
activate_agent(){
    # The very first step of activating the WMAgent upon all needed checks and
    # validations performed during the initialization process.
    # No .init* flags are checked at this stage.
    if [[ "$TEAMNAME" == Tier0* ]]; then
	cat $WMA_DEPLOY_DIR/etc/WMAgentConfig.py $WMA_DEPLOY_DIR/etc/Tier0Config.py > $WMA_CONFIG_DIR/config-template.py 
    else
	cp -vf $WMA_DEPLOY_DIR/etc/WMAgentConfig.py $WMA_CONFIG_DIR/config-template.py
    fi

}

#
# Database prompt so that people can poke around in the db interactively
#

db_prompt(){
    case $AGENT_FLAVOR in
        'mysql')
            # _exec_mysql $@
            mysql -u $MDB_USER --password=$MDB_PASS -h $MDB_HOST --database=$wmaDBName --pager='less -SFX'
            ;;
        'oracle')
            _exec_oracle $@
            # rlwrap -H ~/.sqlplus_history -pgreen sqlplus $ORACLE_USER/$ORACLE_PASS@$ORACLE_TNS
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor/Database"
            return $(false)
            ;;
    esac
}


##############################
#  Agent stuff               #
##############################

# generate the WMAgent config from the basic template
init_wmagent(){

    case $AGENT_FLAVOR in
        'mysql')
            _exec_mysql "create database if not exists $wmaDBName" && \
                echo "$FUNCNAME: MYSQL database: $wmaDBName has been created"
            local database_options="--mysql_url=mysql://$MDB_USER:$MDB_PASS@$MDB_HOST/$wmaDBName "
            ;;
        'oracle')
            echo "$FUNCNAME: Using ORACLE user schema: $ORACLE_USER@$ORACLE_TNS "
            local database_options="--coredb_url=oracle://$ORACLE_USER:$ORACLE_PASS@$ORACLE_TNS "
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac

    local errVal=0
    wmagent-mod-config $database_options \
                       --input=$WMA_CONFIG_DIR/config-template.py \
                       --output=$WMA_CONFIG_DIR/config.py \
                       --working_dir=$WMA_INSTALL_DIR \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --global_workqueue_url=$GLOBAL_WORKQUEUE_URL \
                       --workqueue_db_name=$LOCAL_WORKQUEUE_DBNAME \
                       --workload_summary_url=$WORKLOAD_SUMMARY_URL \
                       --grafana_token=$GRAFANA_TOKEN \
                       --wmstats_url=$WMSTATS_URL \
                       --reqmgr2_url=$REQMGR2_URL \
                       --acdc_url=$ACDC_URL \
                       --dbs3_url=$DBS3_URL \
                       --dbs3_reader_url=$DBS3_READER_URL \
                       --dqm_url=$DQM_URL \
                       --requestcouch_url=$REQUESTCOUCH_URL \
                       --central_logdb_url=$CENTRAL_LOGDB_URL \
                       --wmarchive_url=$WMARCHIVE_URL \
                       --amq_credentials=$AMQ_CREDENTIALS \
                       --rucio_account=$RUCIO_ACCOUNT \
                       --rucio_host=$RUCIO_HOST \
                       --rucio_auth=$RUCIO_AUTH
    let errVal+=$?

    wmcore-db-init --config $WMA_CONFIG_DIR/config.py --create --modules=WMCore.WMBS,WMCore.Agent.Database,WMComponent.DBS3Buffer,WMCore.BossAir,WMCore.ResourceControl;
    let errVal+=$?

    wmagent-couchapp-init
    let errVal+=$?

    return $errVal
}


##############################
#  Tier0 stuff               #
##############################


# generate the tier0 config from the basic template
init_tier0(){
    local errVal=0
    wmagent-mod-config --input=$WMA_CONFIG_DIR/config-template.py \
                       --output=$WMA_CONFIG_DIR/config-agent.py \
                       --coredb_url=oracle://$ORACLE_USER:$ORACLE_PASS@$ORACLE_TNS \
                       --working_dir=$WMA_INSTALL_DIR \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --workqueue_db_name=$LOCAL_WORKQUEUE_DBNAME \
                       --workload_summary_url=$WORKLOAD_SUMMARY_URL \
                       --grafana_token=$GRAFANA_TOKEN \
                       --wmstats_url=$WMSTATS_URL \
                       --dbs3_url=$DBS3_URL \
                       --dqm_url=$DQM_URL \
                       --requestcouch_url=$REQUESTCOUCH_URL \
                       --central_logdb_url=$CENTRAL_LOGDB_URL \
                       --wmarchive_url=$WMARCHIVE_URL \
                       --amq_credentials=$AMQ_CREDENTIALS \
                       --rucio_account=$RUCIO_ACCOUNT \
                       --rucio_host=$RUCIO_HOST \
                       --rucio_auth=$RUCIO_AUTH
    let errVal+=$?

    # NOTE: For the next step relates to modifying the originally generated WMAgent config file
    #       from $WMA_CONFIG_DIR/config-agent.py
    #       to $WMA_CONFIG_DIR/config.py
    #       It removes the components not relevant for T0 and adds the additional DB credentials
    #       used at Tier0Feeder. In order for it to be executed properly we need to download the
    #       tier0-mod-config script from https://github.com/dmwm/T0/blob/master/bin/tier0-mod-config
    optargs=""
    [[ -n $CONFDB_URL ]]      && optargs="$optargs --confdb_url=$CONFDB_URL"
    [[ -n $SMDB_URL ]]        && optargs="$optargs --smdb_url=$SMDB_URL"
    [[ -n $POPCONLOGDB_URL ]] && optargs="$optargs --popconlogdb_url=$POPCONLOGDB_URL"
    [[ -n $T0DATASVCDB_URL ]] && optargs="$optargs --t0datasvcdb_url=$T0DATASVCDB_URL"
    [[ -n $SMNOTIFYDB_URL ]]  && optargs="$optargs --smnotifydb_url=$SMNOTIFYDB_URL"

    tier0-mod-config --input=$WMA_CONFIG_DIR/config-agent.py \
	                 --output=$WMA_CONFIG_DIR/config.py \
                     $optargs
    let errVal+=$?

    wmcore-db-init --config $WMA_CONFIG_DIR/config.py --create --modules=WMCore.WMBS,WMCore.Agent.Database,WMComponent.DBS3Buffer,WMCore.BossAir,WMCore.ResourceControl,T0.WMBS;
    let errVal+=$?

    wmagent-couchapp-init;
    let errVal+=$?

    return $errVal
}


init_agent(){
    if _init_valid $wmaInitActive ; then
        if [[ "$TEAMNAME" == Tier0* ]]; then
            echo "Initializing Tier0 Agent..."
            init_tier0
        else
            echo "Initializing WMAgent..."
            init_wmagent
        fi
    else
        echo "ERROR: This agent has not been activated yet. Cannot proceed."
        return $(false)
    fi
}

start_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Starting WMAgent..."
        wmcoreD --start --config=$WMA_CONFIG_DIR/config.py
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}

stop_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Shutting down WMAgent...";
        wmcoreD --shutdown --config=$WMA_CONFIG_DIR/config.py;
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}

status_of_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Status of WMAgent:"
        wmcoreD --status --config=$WMA_CONFIG_DIR/config.py
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}


#
# revert agent back to pre initialised state & wipe out
# everything currently in existence.
clean_agent(){
    stop_agent;
    if  _init_valid $wmaInitActive ; then
        echo "$FUNCNAME: Cleaning WMAgent..."
        rm -rf $WMA_INSTALL_DIR/*
        rm -f $WMA_CONFIG_DIR/config.py;

        case $AGENT_FLAVOR in
            'mysql')
                clean_mysql
                ;;
            'oracle')
                clean_oracle
                ;;
            *)
                echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
                return $(false)
                ;;
        esac
        rm -f $wmaInitAgent
    else
        echo "$FUNCNAME: ERROR: This agent is not yet activated. Cannot clean it."
        return $(false)
    fi
}

# Wipe out MySQL and Oracle databases
# Will cause next start to recreate databases
clean_mysql(){
    [[ -z $MDB_USER ]] && { echo "$FUNCNAME: ERROR: Not using MySQL..."; exit 1 ; }
    local errVal=0
    echo
    echo    "$FUNCNAME: THE CURRENT OPERATIONS WILL WIPE OUT THE $wmaDBName DATABASE."
    echo -n "$FUNCNAME: Continue? [n]: "
    read x && [[ $x =~ (y|yes|yeS|yEs|Yes|yES|YEs|YeS|YES|Y) ]] || return 102
    echo "$FUNCNAME: ..."
    echo "$FUNCNAME: You still have 5 sec. to cancel before we proceed."
    echo
    sleep 5
    echo "$FUNCNAME: Dropping MariaDB DB... ";
    _exec_mysql "drop database $wmaDBName"   || let errVal+=$?
    [[ $errVal -eq 0 ]] &&  rm -f $wmaInitSqlDB
    return $errVal
}

clean_oracle(){
    [[ -z $ORACLE_USER ]] && { echo "$FUNCNAME: ERROR: Not using ORACLE..."; exit 1 ; }
    local errVal=0
    echo
    echo    "$FUNCNAME: THE CURRENT OPERATIONS WILL WIPE OUT THE $wmaDBName DATABASE."
    echo -n "$FUNCNAME: Continue? [n]: "
    read x && [[ $x =~ (y|yes|yeS|yEs|Yes|yES|YEs|YeS|YES|Y) ]] || return 102
    echo "$FUNCNAME: ..."
    echo "$FUNCNAME: You still have 5 sec. to cancel before we proceed."
    echo
    sleep 5
    echo "$FUNCNAME: Dropping Oracle DB..."
    execute_command_agent "clean-oracle" || let errVal+=$?
    [[ $errVal -eq 0 ]] && rm -f $wmaInitSqlDB
    return $errVal
}

status(){
    echo "----------------------------------------------------------------------"
    echo "Status of services:"
    _status_of_couch
    echo
    echo
    case $AGENT_FLAVOR in
        'mysql')
            _status_of_mysql ;;
        'oracle')
            _status_of_oracle ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac
    echo
    echo
    echo "----------------------------------------------------------------------"
    echo "Status of WMAgent components:"
    status_of_agent
    echo "----------------------------------------------------------------------"
}

clean_all(){
    case $AGENT_FLAVOR in
        'mysql')
            clean_mysql ;;
        'oracle')
            clean_oracle ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac
    clean_couch
    clean_agent
}

execute_command_agent(){
    local RUNTHIS=$1
    local WMCORE_BIN_DIR=$WMCORE_ROOT/bin
    [[ -e $WMCORE_BIN_DIR/$1 ]] || {
        echo "$FUNCNAME: ERROR $RUNTHIS is not a binary in WMCore/bin"
        exit 1
    }
    shift
    export WMAGENT_CONFIG=$WMA_CONFIG_DIR/config.py
    echo "$FUNCNAME: Executing: $RUNTHIS $@ ..."
    $RUNTHIS $@;
}


help(){
    echo -e $*
    cat <<EOF

WMCoreVersion: v$WMCoreVersion

The manage script for WMAgent. It is used to:
 * Check if all components status
 * Check if all needed system services (i.e. MariaDB and CouchDB) are up and running
 * Check and populate the agent's resource-control data based on host and runtime information
 * Create or reuse an agent configuration file based on the host and runtime information
 * Start/Stop the agent

Usage: manage [ status | start-agent | stop-agent | activate-agent | init-agent  |
                clean-mysql | clean-oracle | clean-couch | clean-agent | clean-all | renew-proxy |
                db-prompt <sql command> |
                execute-agent <agent command> ]

EOF
}

usage(){
    help $*
    exit 1
}



#######################################################
# Main
#######################################################

case $1 in
    status)
        status ;;
    activate-agent)
        activate_agent;;
    db-prompt)
        # We need to switch off shell globbing, in order to avoid path expansion
        # of the * symbol from the shell on queries of the sort: "select * from ..."
        shift
        set -f
        db_prompt $@
        set +f ;;
    clean-mysql)
        clean_mysql;;
    clean-oracle)
        clean_oracle;;
    clean-couch)
        clean_couch;;
    init-agent)
        init_agent;;
    start-agent)
        start_agent;;
    stop-agent)
        stop_agent;;
    clean-agent)
        clean_agent;;
    clean-all)
        clean_all;;
    execute-agent)
        shift
        execute_command_agent $@;;
    renew-proxy)
        _renew_proxy ;;
    help)
        help ;;
    version)
        echo "WMCore  version: $WMCoreVersion"
        echo "WMAgent version: $WMA_TAG";;
    * )
        usage "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
        exit 1 ;;
esac
