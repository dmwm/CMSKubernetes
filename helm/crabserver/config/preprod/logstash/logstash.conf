# Migrated from: https://github.com/dmwm/CRABServer/blob/master/src/script/Monitor/logstash/crabtaskworker.conf

input { beats { port => 5044 } }

filter {
  # whitelisted tags
  if "crabtaskworker" not in [tags] and "crabpublisher" not in [tags] and "crabhttpcall" not in [tags] and "crabrest" not in [tags] { drop { } }

  mutate {
    # ---- Common fields ---- [metadata]
    add_field => {
      "cmsweb_cluster" => "${CMSWEB_CLUSTER:NA}"
      "cmsweb_env" => "${CMSWEB_ENV:NA}"
      "filebeat_id" => "%{[agent][id]}"
      "filebeat_name" => "%{[agent][name]}"
      "filebeat_version" => "%{[agent][version]}"
      "hostname" => "%{[host][name]}"
      "log_file" => "%{[log][file][path]}"
    }
  }

  if "crabtaskworker" in [tags] {
      # ------------------------------------------------------------------------------------------------------------------------------------------------------------------
      # TASKWORKER
      mutate {
        # MONIT mandatory fields. Be aware that you cannot use any of these names in grok/mutate parsers!
        replace => {
          "producer" => "crab"
          "type" => "crabtaskworker"
        }
      }
      if "completed in" in [message] {
        grok {
          match => {
            "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: %{NOTSPACE:workType} work on %{NOTSPACE:taskName} completed in %{NUMBER:completionTime:int} seconds"
          }
          add_field => {"log_type" => "work_on_task_completed"}
          overwrite => ["message"]
        }

      } else if ( [message] =~ /.*Starting.*at.*on.*/ ) {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: Starting <function %{NOTSPACE:functionName} at %{DATA:taskID}> on %{NOTSPACE:taskName}"
            }
            add_field => {"log_type" => "start_new_task"}
            overwrite => ["message"]
          }
      } else if "TWSTART" in [message] {
          grok {
              match => {
                "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:MasterWorker,%{INT}:TWSTART: %{GREEDYDATA:tw_json_data}"
              }
              add_field => {"log_type" => "tw_config_data"}
              overwrite => ["message"]
          }
          if [tw_json_data] {
            json {
              source => "tw_json_data"
              target => "tw_json_data"
            }
          }

      } else if ( [message] =~ /.*Finished.*object at .*/ ) {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:INFO:Handler,%{INT}:Finished <TaskWorker.Actions.%{NOTSPACE:action} object at %{DATA:taskID}> on %{NOTSPACE:taskName} in %{NUMBER:completionTime:int} seconds"
            }
            add_field => {"log_type" => "action_on_task_finished"}
            overwrite => ["message"]
          }
      } else { drop {} }

      date {
        # Since date string does not provide timezone, we need to specify it explicitly
        match => ["timestamp_temp", "YYYY-MM-dd HH:mm:ss,SSS"]
        timezone => "Europe/Zurich"
        target => "rec_timestamp_str"
      }
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  } else if "crabpublisher" in [tags] {
      # ------------------------------------------------------------------------------------------------------------------------------------------------------------------
      # CRABPUBLISHER
      mutate {
        # MONIT mandatory fields. Be aware that you cannot use any of these names in grok/mutate parsers!
        replace => {
          "producer" => "crab"
          "type" => "crabpublisher"
        }
      }

      if "PUBSTART" in [message] {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:PUBSTART:%{GREEDYDATA:pb_json_data}"
            }
            add_field => {"log_type" => "publisher_config_data"}
            overwrite => ["message"]
          }
          if [pb_json_data] {
            json{
              source => "pb_json_data"
              target => "pb_json_data"
            }
          }

      } else if ( [message] =~ /.*blocks failed.*files.*/ ) {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:Taskname %{NOTSPACE:taskName} : %{INT:blocks} blocks failed for a total of %{INT:files} files"
            }
            add_field => {"log_type" => "failed_publication"}
            overwrite => ["message"]
          }

      } else if ( [message] =~ /.*Published.*files in.*/ ) {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:Taskname %{NOTSPACE:taskName} is %{NOTSPACE:publicationResult}. Published %{INT:filesPublished} files in %{INT:blocks} blocks."
            }
            add_field => {"log_type" => "successful_publication"}
            overwrite => ["message"]
          }

      } else if ( [message] =~ /.*Exception.*TaskPublish.*/ ) {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:%{GREEDYDATA:exceptionHandled}"
            }
            add_field => {"log_type" => "publication_error"}
            overwrite => ["message"]
          }

      # This filter is currently used for production publisher. After we deploy preprod to prod, this filter can be dropped
      } else if "DEBUG:master" in [message] {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:master:%{SPACE}%{INT:acquiredFiles}%{SPACE}:%{SPACE}%{NOTSPACE:taskName}"
            }
            add_field => {"log_type" => "acquired_files"}
            overwrite => ["message"]
          }

      # this filter mathces changes in #6861, which is already in preprod and dev
      } else if "acquired_files" in [message] {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:acquired_files:%{SPACE}%{NOTSPACE:acquiredFilesStatus}%{SPACE}%{INT:acquiredFiles}%{SPACE}:%{SPACE}%{NOTSPACE:taskName}"
            }
            add_field => {"log_type" => "acquired_files_status"}
            overwrite => ["message"]
          }

      } else { drop { } }
      date {
        # Since date string does not provide timezone, we need to specify it explicitly
        match => ["timestamp_temp", "YYYY-MM-dd HH:mm:ss,SSS"]
        timezone => "Europe/Zurich"
        target => "rec_timestamp_str"
      }
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  } else if "crabhttpcall" in [tags] {
      # ------------------------------------------------------------------------------------------------------------------------------------------------------------------
      # CRABHTTPCALL (previously crabserver)
      mutate {
        # MONIT mandatory fields. Be aware that you cannot use any of these names in grok/mutate parsers!
        replace => {
          "producer" => "crab"
          "type" => "crabhttpcall"
        }
      }
      # parse log path to get pod name
      # /var/log/pods/crab_crabserver-test-5f9bd5f58d-5nfhc_5366ebdb-ee96-4641-8643-f3bbe63f808f/crabserver/0.log
      grok {
          match => { "[log][file][path]" => '/var/log/pods/crab_%{DATA:pod_name}_%{DATA}/%{GREEDYDATA}' }
      }

      grok {
          # [07/Dec/2022:20:06:47] crabserver-56c69685b6-477jr 188.184.91.103:41924 "GET /crabserver/devthree/info HTTP/1.1" 200 OK [data: 9354 in 103 out 4870 us ] [auth: ok "/DC=ch/DC=cern/OU=Organic Units/OU=Users/CN=tseethon/CN=856006/CN=Thanayut Seethongchuen" "" ] [ref: "https://cmsweb-test12.cern.ch" "Mozilla/5.0 (X11; Linux x86_64; rv:107.0) Gecko/20100101 Firefox/107.0" ] - Podname=crabserver-6cf49bcfff-bxvb6 Type=cherrypylog
          match => { "message" => '\[%{NOTSPACE:timestamp_temp}\] %{DATA:backend} %{IPORHOST:clientip}(|:%{NUMBER}) "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{DATA} \[data: (-|%{NUMBER:bytes_sent:int}) in (-|%{NUMBER:bytes_received:int}) out (-|%{NUMBER:time_spent_ms:int}) us \] \[auth: %{DATA} "%{DATA:dn}".*\] \[ref: "%{DATA}.*" "%{DATA:client}" \]' }
      }
      grok {
        match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
      }
      if ![uri_params] {
          ruby { code => "event.set('uri_params','')" }
      }
      grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
      if [client] {
          grok { match => { "client" => '%{DATA:client_name}/%{DATA:client_version}$' } }
      }
      # !ATTENTION! Different date-time format than publisher and TW, means that special for crabserver.
      date {
         # Since date string does not provide timezone, we need to specify it explicitly
         match => [ "timestamp_temp", "dd/MMM/yyyy:HH:mm:ss" ]
         timezone => "Europe/Zurich"
         target => "rec_timestamp_str"
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  } else if "crabrest" in [tags] {
      # ------------------------------------------------------------------------------------------------------------------------------------------------------------------
      # CRABLOG
      mutate {
        # MONIT mandatory fields. Be aware that you cannot use any of these names in grok/mutate parsers!
        replace => {
          "producer" => "crab"
          "type" => "crabrest"
        }
      }
      # parse log path to get pod name
      # /var/log/pods/crab_crabserver-test-5f9bd5f58d-5nfhc_5366ebdb-ee96-4641-8643-f3bbe63f808f/crabserver/0.log
      grok {
          match => { "[log][file][path]" => '/var/log/pods/crab_%{DATA:pod_name}_%{DATA}/%{GREEDYDATA}' }
      }

      if ( [message] =~ /.*MeasureTime:seconds.*/ ) {
          grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:trace_id}:%{NOTSPACE:log_level}:%{NOTSPACE}:MeasureTime:seconds - modulename=%{NOTSPACE:modulename} label='%{NOTSPACE:label}' tot=%{NUMBER:tot:float} proc=%{NUMBER:proc:float} thread=%{NUMBER:thread:float}" }
            add_field => {"log_type" => "measure_time"}
          }
      } else if ( [message] =~ /.*MeasureSize:bytes.*/ ) {
          grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:trace_id}:%{NOTSPACE:log_level}:%{NOTSPACE}:MeasureSize:bytes - modulename=%{NOTSPACE:modulename} label='%{NOTSPACE:label}' obj_size=%{INT:obj_size:int} get_size_time=%{NUMBER:get_size_time:float}" }
            add_field => {"log_type" => "measure_size"}
          }
      }
      date {
        # Since date string does not provide timezone, we need to specify it explicitly
        match => ["timestamp_temp", "YYYY-MM-dd HH:mm:ss,SSS"]
        timezone => "Europe/Zurich"
        target => "rec_timestamp_str"
      }
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  }

  # ---- Common modifications ----
  if "_grokparsefailure" in [tags] { drop { } }

  # Date operations
  ruby {
    # "metadata.timestamp"(date in ES) equals to record_time(int in ES) which we need for latency calculation
    # "producer_time" is filebeat process time stamp.
    code => "event.set('timestamp', (event.get('rec_timestamp_str').to_f * 1000).to_i)
           event.set('record_time', (event.get('rec_timestamp_str').to_f * 1000).to_i)
           event.set('producer_time', (event.get('@timestamp').to_f * 1000).to_i)
           "
  }

  # remove quotes from message entry since it will break the JSON
  mutate { gsub => [ "message", "\n", "", "message", "\"", ""] }

  # remove undesired fields and objects
  mutate { remove_field => ["@timestamp", "@version", "timestamp_temp", "agent", "log", "input", "tags", "ecs", "host", "cloud", "event" ] }

}

output {
  if [type] in ["crabtaskworker", "crabpublisher", "crabhttpcall", "crabrest"] {
    http {
      http_method => "post"
      url => "http://monit-logs.cern.ch:10012/"
      content_type => "application/json; charset=UTF-8"
      format => "json_batch"
      socket_timeout => 60
      connect_timeout => 60
    }
  } else {
    # For debugging, please keep it to catch problems
    stdout { codec => json }
  }
}
